-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Parchi where
import Abschi
import Lexchi
import ErrM

}

%name pExp Exp
%name pListLIdent ListLIdent
%name pExp1 Exp1
%name pListExp3 ListExp3
%name pListBranch ListBranch
%name pListDef ListDef
%name pExp3 Exp3
%name pExp2 Exp2
%name pBranch Branch
%name pDef Def

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '(' { PT _ (TS _ 1) }
 ')' { PT _ (TS _ 2) }
 '->' { PT _ (TS _ 3) }
 '.' { PT _ (TS _ 4) }
 ';' { PT _ (TS _ 5) }
 '=' { PT _ (TS _ 6) }
 '\\' { PT _ (TS _ 7) }
 'case' { PT _ (TS _ 8) }
 'in' { PT _ (TS _ 9) }
 'let' { PT _ (TS _ 10) }
 'of' { PT _ (TS _ 11) }
 'rec' { PT _ (TS _ 12) }
 '{' { PT _ (TS _ 13) }
 '}' { PT _ (TS _ 14) }

L_UIdent { PT _ (T_UIdent $$) }
L_LIdent { PT _ (T_LIdent $$) }
L_err    { _ }


%%

UIdent    :: { UIdent} : L_UIdent { UIdent ($1)}
LIdent    :: { LIdent} : L_LIdent { LIdent ($1)}

Exp :: { Exp }
Exp : '\\' ListLIdent '.' Exp { Lambda (reverse $2) $4 } 
  | 'case' Exp 'of' '{' ListBranch '}' { Case $2 $5 }
  | 'rec' LIdent '=' Exp { Rec $2 $4 }
  | 'let' '{' ListDef '}' 'in' Exp { Let $3 $6 }
  | Exp1 { $1 }


ListLIdent :: { [LIdent] }
ListLIdent : {- empty -} { [] } 
  | ListLIdent LIdent { flip (:) $1 $2 }


Exp1 :: { Exp }
Exp1 : Exp ListExp3 { Apply $1 $2 } 
  | Exp2 { $1 }


ListExp3 :: { [Exp] }
ListExp3 : Exp3 { (:[]) $1 } 
  | Exp3 ListExp3 { (:) $1 $2 }


ListBranch :: { [Branch] }
ListBranch : Branch { (:[]) $1 } 
  | Branch ';' ListBranch { (:) $1 $3 }


ListDef :: { [Def] }
ListDef : Def { (:[]) $1 } 
  | Def ';' ListDef { (:) $1 $3 }


Exp3 :: { Exp }
Exp3 : LIdent { Var $1 } 
  | UIdent { Const $1 }
  | '(' Exp ')' { $2 }


Exp2 :: { Exp }
Exp2 : Exp3 { $1 } 


Branch :: { Branch }
Branch : UIdent '->' Exp { Branch $1 $3 } 


Def :: { Def }
Def : LIdent '=' Exp { Def $1 $3 } 



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

