module Skelchi where

-- Haskell module generated by the BNF converter

import Abschi
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transUIdent :: UIdent -> Result
transUIdent x = case x of
  UIdent str  -> failure x


transLIdent :: LIdent -> Result
transLIdent x = case x of
  LIdent str  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  Lambda lidents exp  -> failure x
  Apply exp exps  -> failure x
  Case exp branchs  -> failure x
  Rec lident exp  -> failure x
  Let defs exp  -> failure x
  Var lident  -> failure x
  Const uident  -> failure x


transBranch :: Branch -> Result
transBranch x = case x of
  Branch uident exp  -> failure x


transDef :: Def -> Result
transDef x = case x of
  Def lident exp  -> failure x



